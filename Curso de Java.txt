Para concatenar vários elementos em um mesmo comando de escrita:
Regra geral para printf:
"TEXTO1 %f TEXTO2 %f TEXTO3", variavel1, variavel2 
    String nome = "Maria";
    int idade = 31;
    double renda = 4000.0;
    System.out.printf("%s tem %d anos e ganha R$ %.2f reais%n", nome, idade, renda);

PARA DEFINIR . AO INVES DE ,
import java.util.Locale;
Locale.setDefault(Locale.US);

PROCESSAMENTO DE DADOS
variavel = expressao;
int x, y;
x=5;
y = 2 * x;
System.out.prinln(x);
System.out.prinln(y);

MATRIZES	
arranjos bidimensionais
Array
 homogenea
 ordenada
 alocada de uma vez so, em um bloco contiguo de memoria
Vantagens
 acesso imediato aos elementos pela sua posicao
Desvantagens
 tamanho fixo
 dificuldade para se realizar insercoes e delecoes



CASTING
É a conversão explícita de um tipo para outro.
É necessário quando o compilador não é capaz de “adivinhar” que o
resultado de uma expressão deve ser de outro tipo.

double a;
int b;
a = 5.0;
b = (int) a;
System.out.println(b);

int a, b;
double resultado;

a = 5;
b = 2;

resultado = (double) a / b;
System.out.println(resultado);

ENTRADA DE DADOS (leitura):
Scanner sc = new Scanner(System.in);
precisa dar um import java.util.Scanner;
faca sc.close() quando nao precisar mais do objeto sc;
x = sc.next();

import java.util.Scanner;
Scanner sc = new Scanner(System.in);
		
		String x;
		x = sc.next();
		System.out.println("Voce digitou: " + x);
		
		
		sc.close();

x = sc.nextInt();
x = sc.nextDouble(); => localidade do sistema;
x = sc.next().charAt(0);

Para ler vários dados na mesma linha
string x;
int y;
double z;
x = sc.next();
y = sc.nextInt();
z = sc.nextDouble();


Para ler um texto ATÉ A QUEBRA DE LINHA
import java.util.Scanner;
public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		String s1, s2, s3;
		s1 = sc.nextLine();
		s2 = sc.nextLine();
		s3 = sc.nextLine();
		System.out.println("DADOS DIGITADOS:");
		System.out.println(s1);
		System.out.println(s2);
		System.out.println(s3);
		sc.close();
	}
}

QUEBRA DE LINHA PENDENTE
Solução:
Faça um nextLine() extra antes de 
fazer o nextLine() de seu 
interesse

FUNÇÕES MATEMATICAS
A= Math.sqrt(x); => variavel A recebe a raiz quadrada de x;
A= Math.pow(x, y); => variavel A recebe o resultado de x elevado a y;
A = Math.abs(x); => variavel A recebe o valor absoluto de x;

public class Main {
	public static void main(String[] args) {
		double x = 3.0;
		double y = 4.0;
		double z = -5.0;
		double A, B, C;

		A = Math.sqrt(x);
		B = Math.sqrt(y);
		C = Math.sqrt(25.0);
		System.out.println("Raiz quadrada de " + x + " = " + A);
		System.out.println("Raiz quadrada de " + y + " = " + B);
		System.out.println("Raiz quadrada de 25 = " + C);

		A = Math.pow(x, y);
		B = Math.pow(x, 2.0);
		C = Math.pow(5.0, 2.0);
		System.out.println(x + " elevado a " + y + " = " + A);
		System.out.println(x + " elevado ao quadrado = " + B);
		System.out.println("5 elevado ao quadrado = " + C);

		A = Math.abs(y);
		B = Math.abs(z);
		System.out.println("Valor absoluto de " + y + " = " + A);
		System.out.println("Valor absoluto de " + z + " = " + B);
}
}

Marcando brakpoint
Ctrl+shift+b

step over => F6


EXPRESSÕES COMPARATIVAS
>
<
>=
<=
==
!=

EXPRESSÕES LÓGICAS
&& -> E
|| -> OU
! -> NAO

ESTRUTURA CONDICIONAL	
eh uma estrutura de controle que define permitir que um certo bloco de comandos
somente sera executado dependendo de uma condicao

if (<condicao1>){
    <comando1>
    <comando2>
}

if (<condicao1>){
    <comando1>
    <comando2>
}
else {
    <comando3>
    <comando4>
}

if (<condicao1>){
    <comando1>
    <comando2>
}
else if(condicao3) {
    <comando3>
    <comando4>
}
else {
    <comando5>
    <comando6>
}

OPERADORES DE ATRIBUICAO CUMULATIVA 
a += b; a = a + b;
a -= b; a = a - b;
a *= b; a = a * b;
a /= b; a = a / b;
a %= b; a = a % b;

ESTRUTURAS REPETITIVAS 

WHILE - enquanto
Estrutura de controle que repete um bloco de comandos enquando uma condicao for verdadeira.
Usa-se quando nao se sabe previamente a quantidade de repeticoes que sera realizada.

while(condicao){
    comando1                                 => v: executa e volta 
                                             => f: pula fora
    comando2
}    


FOR - para
Estrutura de controle que repete um bloco de comandos para um certo intervalo de valroes.
Usa-se quando se sabe previamente a quantidade de repeticoes, ou o intervalo de valores.

for (inicio; condicao; incremento){
    comando1
    comando2
}  

inicio = executa somente na primeira vez;
condicao = v: executa e volta; f: pula fora;
incremento = executa toda vez depois de voltar;


DO WHILE - faca-enquanto
Menos utilizada
A estrutura é executada pelo menos uma vez

do {
    comando 1                   v: volta
    comando 2                   f: pula fora
} while (condicao);

VETORES
Um vetor corresponde a uma colocao de dados de tamanho fixo, indexada, unidimensional e homogenea
Arranjos unidimensionais 
primeira posicao 0

Como criar um vetor?

DECLARACAO 
int[] A;
double[] B;
String[] C;

INSTANCIACAO
A = new int[10];
B = new double[5];
C = new String[8];

COMO ACESSAR OS ELEMENTOS DE UM VETOR?

A[3] = 10; //VETOR A, NA CASA 3, RECEBE O VALOR 10

for (int i=0; i<5; i++){
    B[i] = i + 10;
} //posicao 0 recebe 10; posicao 1 recebe 11; ...

C[1] = "Maria";


MATRIZ 
coleção de dados de tamanho fixo, indexada, bidimentsional e homegenea;

COMO CRIAR UMA MATRIZ?

declaracao double[][] A;
instanciacao A = new double[3][4];

COMO ACESSAR OS ELEMENTOS DE UMA MATRIZ?

A[1][2] = 10;


CONVENCOES DE CODIGO
Nomes de classes devem começar com letra maiúscula e usar a convenção PascalCase (também conhecida como Upper CamelCase).

Exemplo: MinhaClasse.
Nomes de métodos devem começar com letra minúscula e usar a convenção camelCase.

Exemplo: meuMetodo().
Nomes de constantes devem ser totalmente em letras maiúsculas, separadas por underline.

Exemplo: MINHA_CONSTANTE.
Nomes de variáveis devem começar com letra minúscula e usar a convenção camelCase.

Exemplo: minhaVariavel.
Todas as linhas de código devem ter no máximo 80 caracteres de largura para facilitar a leitura.

Recomenda-se usar espaços em branco para separar operadores, palavras-chave e elementos de controle de fluxo.

Exemplo: if (condicao) {.
Use comentários para documentar seu código, explicando o que ele faz e por que ele faz isso. Comentários devem ser claros e concisos.

TIPO DE VARIAVEL 
boolean <nome> = true or false;

FORMATACAO DE TEXTOS => text block
String sinopseDoFilme = """
                               Filme Top Gun
                               Filme de aventura que mostra uma guerra com avioes
                               Muito bom!
                               Ano de lancamento
                               """ + anoDeLancamento;


COMPARANDO STRINGS
Em Java, é possível comparar duas Strings utilizando o operador ==. Porém, esse operador verifica apenas se as duas variáveis apontam para o mesmo objeto na memória, e não se o conteúdo das Strings é igual. Para comparar o conteúdo de duas Strings, é necessário utilizar o método equals(). Por exemplo:

String senha = "12345";
if (senha.equals("12345")) {
    System.out.println("Acesso autorizado!");
} else {
    System.out.println("Senha incorreta.");
}
Nesse caso, o método equals() é utilizado para comparar o conteúdo da variável senha com a String "12345". Se as duas Strings forem iguais, a mensagem "Acesso autorizado!" será impressa, caso contrário, a mensagem "Senha incorreta." será impressa.

Mais adiante trabalharemos também com o método equalsIgnoreCase(), que é usado para que a comparação de Strings desconsidere as letras maiúsculas e minúsculas. Utilizando apenas o equals, as String “alura” e “Alura” seriam consideradas diferentes.                       


METODO FORMATED

String nome = "Maria";
int idade = 30;
double valor = 55.9999;
System.out.println(String.format("Meu nome é %s, eu tenho %d anos e hoje gastei %.2f reais", nome, idade, valor));

String nome = "João";
int aulas = 4;

String mensagem = """
                  Olá, %s!
                  Boas vindas ao curso de Java.
                  Teremos %d aulas para te mostrar o que é preciso para você dar o seu primeiro mergulho na linguagem!
                  """.formatted(nome, aulas);

System.out.println(mensagem);


CASTING
transformar um tipo de variavel para outro

COMPARANDO STRING
nomeVariavel.equals("texto que quer");

ORIENTACAO A OBJETOS

CLASSE -> Especifica o conteudo de um objeto (abstração, o que é comum aos intens daquela classe)

ex: criei uma classe chamada filme
public class Filme { //todo filme tem
    String nome;
    int anoDeLancamento;
    boolean incluidoNoPlano;
    double avalicao;
    int totalDeAvaliacoes;
    int duracaoEmMinutos;
}

nova classe Principal:
Filme nomeFilme = new Filme(); // criando uma variavel de tipo por referencia -> recebe os atributos da classe

OPERADORES BITWISE
& -> E bit a bit
| -> OU bit a bit
^ -> OU-exclusivo bit a bit

FUNCOES INTERESSANTRES PARA STRING
.toLowerCase(); -> transforma em letras minusculas
.toUpperCase(); -> transforma para letras maiusculas
.trim() -> elimina os espacos nos cantos das strings
.substring(2); -> mostra a partir da posicao informada
.substring(2, 9); -> a partir do 2 e abaixo do 9
.replace('a', 'x'); -> sempre que achar um a trocar por x
.indexOf("bc"); -> mostra a primeira ocorrencia do bc (posicao)
.lastIndexOf("bc"); -> mostra a primeira ocorrencia 

.split(""); -> recorta a string
ex:

String s = "potato apple lemon";

String[] vect = s.split(" ");
String word1 = vect[0]; 0 -> potato
String word2 = vect[1]; 1 -> apple
String word3 = vect[2]; 2 -> lemon

FUNCOES

- Representam um processamento que possui um significado
	-Math.sqrt(double)
	-System.out.println(string)

- Principais vantangens: modularização, delegação e reaporveitamento

- Dados de entrada e saida
	- funcoes podem receber dados de entrada (parametros ou argumentos)
	- funcoes podem ou nao retornar uma saida

- Em orientação a objetos, funções em classes recebem o nome de metodos

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        // fazer um programa para ler tres numeros inteiros e mostrar na tela o maior deles

        Scanner sc = new Scanner(System.in);

        System.out.println("Enter three numbers: ");
        int a = sc.nextInt();
        int b = sc.nextInt();
        int c = sc.nextInt();

        int higher = max(a, b, c);
        showResult(higher);

        sc.close();
    }

    public static int max(int x, int y, int z) { // recebendo parametros (dados de entrada)
        int aux; // variavel local da funcao
        if (x > y && x > z){
            aux = x;
        } else if (y > z) {
            aux = y;
        } else {
            aux = z;
        }
        return aux;
    }

    public static void showResult(int value) { // void pq nao retorna nada
        System.out.println("Higher = " + value);
    }
}

CASO SEM ORIENTACAO A OBJETOS
import java.util.Locale;
import java.util.Scanner;

public class Program {
    public static void main(String[] args) {
        Locale.setDefault(Locale.US);
        Scanner sc = new Scanner(System.in);

        System.out.println("Enter the measures of triangle X: ");
        double a1 = sc.nextDouble();
        double b1 = sc.nextDouble();
        double c1 = sc.nextDouble();
        System.out.println("Enter the measures of triangle Y: ");
        double a2 = sc.nextDouble();
        double b2 = sc.nextDouble();
        double c2 = sc.nextDouble();

        double p = (a1 + b1 + c1) / 2.0;
        double areaX = Math.sqrt(p * (p - a1) * (p - b1) * (p - c1));

        p = (a2 + b2 + c2) / 2.0;
        double areaY = Math.sqrt(p * (p - a2) * (p - b2) * (p - c2));

        System.out.printf("Triangle X area: %.4f\n", areaX);
        System.out.printf("Triangle Y area: %.4f\n", areaY);

        if (areaX > areaY) {
            System.out.println("Larger area: X");
        } else {
            System.out.println("Larger area: Y");
        }

        sc.close();

    }
}

CASO COM ORIENTACAO

Classe 

- É um tipo estruturado que pode conter (membros):
	- Atributos (dados / campos)
	- Metodos (funcoes / operacoes)

- A classe tambem pode prover muitos outros recurso, tais como:
	- construtores
	- Sobrecarga
	- encapsulamento
	- heranca
	- polimorfismo

Exemplos:
• Entidades: Produto, Cliente, Triangulo
• Serviços: ProdutoService, ClienteService, EmailService, StorageService
• Controladores: ProdutoController, ClienteController
• Utilitários: Calculadora, Compactador
• Outros (views, repositórios, gerenciadores, etc.)

Classe eh a definicao do tipo
Objetos sao instancias da classe

package entities;

public class Triangle {
    public double a;
    public double b;
    public double c;
}

Triangle x, y; // criando as variaveis do tipo triangulo (vai receber atributos comuns)
        x = new Triangle(); // instanciando
        y = new Triangle();

comando this.variavel => chama o atributo no metodo e nao o parametro

DISCUSSAO
Toda classe em Java eh uma subclasse da classe Object

Object possui metodos
-toString: transforma o objeto em string

MEMBROS ESTATICOS
- Membros de classe
	- em oposicao a membros e instancia
- Sao membros que fazem sentido independentemente de objetos. Nao
precisam de objeto para serem chamados. Sao chamados a partir do proprio nome da classe
- Aplicacoes comuns:
	- classes unitarias
	- declaracao de constantes
-Uma classe que possui somente membros estaticos, pode ser uma classe estatica também. Esta classe nao podera ser instanciada
public static final double PI = 3.14159; // valor constante que nao vai mudar

CONSTRUTORES // obrigar o programador a instanciar a classe com valores nos objetos //inicilizar os valores
Operação especial da classe, que executa no momento da instanciação do objeto
Usos comuns:
 Para iniciar valor dos atributos
 Permitir ou obrigar que o obejto receba dados / dependencias no momento de sua instanciacao
Se um construtor customizado nao for especificado, a classe disponibiliza o construtor padrao
E possivel especificar mais de um construtor na mesma classe (sobrecarga)

Product p = new Product(); // vai ser instanciado so dps dos dados na classe Program

// vem dps dos objetos na classe

public Product(String name, double price, int quantity) {
    this.name = name;
    this.price = price;
    this.quantity = quantity;
}

PALAVRA this
Referencia para o proprio objeto
usos comuns:
  Diferenciar atributos de variaveis locais
  Passar o proprio objeto como argumento na chamada de um metodo ou construtor

SOBRECARGA 
eh um recurso que uma classe possui de oferecer mais de uma operacao com o mesmo nome,
porem com diferentes listas de parametros
public Product(String name, double price) {
    this.name = name;
    this.price = price;
}

ENCAPSULAMENTO
Principio que consiste em esconder detalhes de implementacao de uma classe,
expondo apenas opreacoes seguras e que mantenham os objetos em um estado
consistente.
Regra de ouro: o objeto deve sempre estar em um estado consistente, e a
propria classe deve garantir isso
O objeto NAO deve expor nenhum atributo (modificador de acesso private)
Os atributos devem ser acessados por meio de metodod get e set

private String name;

public String getName(){
    return name;
}

public void setName(String name){
    this.name = name;
}

// classe Program
product.setName("Computer");
sout("Updated name: " + getName());

MODIFICADORES DE ACESSO
private: membro so pode ser acessado na propria classe
(nada): i membro so pode ser acessado nas classes do mesmo pacote
protected: membro so pode ser acessado no mesmo pacote. bem como em subclasses de pacotes diferentes
public: membro eh acessado por todas as classes (ao menos que ele resida
em um modulo diferente que nao exporte o pacote onde ele esta)

uso so o met get para valores que so podem acessados, e usos get  e set para valores que quero modificar

TIPOS REFERENCIA VS TIPO VALOR
Variaveis cujo tipo sao classes nao devem ser entendidas como caixas, mas sim tentaculos (ponteiros) para caixas
Tipos referencia aceitam o valor "null", que indica que a variavel aponta para ninguem.

TIPOS PRIMITIVOS SAO TIPOS VALOR
Em Java, tipos primitivos sao tipos valor. Tipos valor sao CAIXAS e nao ponteiros.

TIPOS primitivos e inicializacao

int p;
System.out.println(p); // erro: vairavel nao inicializa

p = 10;
System.out.println(p);

VALORES PADRAO
Quando alocamos (new) qualquer tipo estruturado (classe ou array),
sao atributos valores padrao aos seus elementos
- numeros: 0
- boolean: false
- char: caractere codigo 0
- objeto: null

DESALOCACAO DE MEMORIA - GARBAGE COLLECTOR E ESCOPO LOCAL

GARBAGE COLLECTOR
É um processo que automatiza o gerenciamento de memoria de um programa
em execucao
O garbage collector monitora os objetos alocados dinamicamente pelo programa
(no heap), desalocando aqueles que nao estao mais senso utilizados.

VETORES
-arranjos unidimensionais
- array -> estrutura de dados
	mesmo tipo
	ordanada
	alocada de uma vez so, em um bloco contiguo de memoria
vect.length -> quantidade de elementos no vetor, pode colocar no laco

Fazer um programa para ler um numero inteiro N e os dados (nome e preço) de 
N Produtos. Armazene os N produtos em um vetor. Em seguida, mostrar o preço
médio dos produtos.

BOXING, UNBOXING E WRAPPER CLASSES

BOXING
é o processo de conversção de um objeto tipo valor para um objeto tipo referência compativel

int x = 20;

Object obj = x;

int y = (int) obj; // vai se tornar um tipo primitivo

WRAPPER CLASSES
são classes equivalentes aos tipos primitivos
boxing e unboxing é natural na linguagem 
uso comum: campos de entidades em sistemas de informação
	pois tipos referencia (classes) aceitam valor null e usufruem dos recursos OO

Integer x = 10;

int y = x * 2;

public class Product {

    public String name;
    public Double price;
    public Integer quantity;

}

LAÇO "for each"
Sixtaxe opcional e simplificada para percorrer colerções

Sintaxe:

for (Tipo apelido : colação) {
    <comando 1>
    <comando 2>
}

ex:

String[] vect = new String[] {"Maria", "Bob", "Alex"}
for (int i=0; i<vect.length; i++) {
	sot(vect[i]);
}

for (String obj : vect) { // para cada objeto `obj` contido em vect, faça:
    sot(obj);
}

LISTAS
Estrutura de dados
  homogenea
  ordenada
  inicia vazia, e seus elementos sao alocados sob demanda
  cada elemento ocupa um no (ou nodo) da lista
  
Tipo (interface): List //nao pode instanciar
Classes que implementam: ArrayList, LinkedList, etc.

Vantagens
 TAmanho variavel
 FAcilidade para se realizar insercoes e delecoes
Desvantagens
 Acesso sequencial aos elementos

Tamanho da lista: size()
Inserir elemento na lista: add(obj), add(int, obj)
Remover elementos da lista: remove(obj), remove(int), removeIf(Predicate)
Encontrar posicao de elemento: indexOf(obj), lastIndexOf(obj)
Filtrar lista com base em predicado: 
List<Integer> result = list.stream().filter(x -> x > 4).collect(Collectors.toList());
Encontrar primeira ocorrencia com base em predicado:
Integer result = list.stream().filter(x -> x > 4).findFirst().orElse(null);

Declarando           instanciando
List<Integer> list = new ArrayList<>();

list.add("Maria");
list.add("Alex");
list.add("Bob");
list.add("Anna");
list.add(2, "Marco"); // na posicao 2 adicionar Marco

System.out.println(list.size()); // ver o tamanho da lista

// remover elemento da lista
list.remove("Anna");

// remover da lista elementos que atendem a um predicado
list.removeIf(x -> x.charAt(0) == 'M');

//encontrar a posicao de um elemento
list.indexOf("Bob"); 

// pegar a lista e filtrar com todo mundo que comeca com A
List<String> result = list.stream().filter(x -> x.charAt(0) == 'A').collect(Collectors.toList());
NOVA VERSAO: List<String> result = list.stream().filter(x -> x.charAt(0) == 'A').toList();


for string x : result
sout(x);


for (String x : list) {
    System.out.println(x);
}

//encontrar o primeiro elemento que comce com a letra A
String name = list.stream().filter(x -> x.charAt(0) == 'A').findFirst().orElse(null);
sout name;

CONCEITOS IMPORTANTES
- Data-[hora] local: ano-mes-dia-[hora] sem fuso horario
  usar quando o momento exato nao interessa a pessoas de outro fuso horario
  Uso comum: sistema de regiao unica, Excel.
     Data de nascimento
     Data-hora da venda

- Data-hora global: ano-mes-dia-hora com fuso horario
  usar quando o momento exato interessa a pessoas de outro fuso horario
  Uso comum: sistemas multi-regiao, web.
     Quando sera o sorteio?
     Quando o comentario foi postado?
     Quando foi realizada a venda?
     Inicio e fim do evento

- Duracao: tempo decorrido entre duas data-horas

PADRAO ISO 8601

Data-[hora] local:
2022-07-21
2022-07-21T14:52
2022-07-21T14:52:09
2022-07-21T14:52:09.4073

Data-hora global:
2022-07-23T14:52:09Z
2022-07-23T14:52:09.254935Z
2022-07-23T14:52:09-03:00

OPERACOES IMPORTANTES COM DATA-HORA

Instanciacao
- (agora) -> Data-hora
- Texto ISO 8601 -> Data-hora
- texto formato customizado -> Data-hora
- dia, mes, ano, [horario] -> Data-hora local

Formatacao
Data-hora -> Texto ISO 8601
Data-hora -> Texto fomrato customizado

Obeter daods de uma data-hora local
 - Data-hora local -> dia, mes, ano, horario

Converter data-hora glboal para local
 - Data-hora global, timezone (sistema local) -> Data-hora local

Calculos com data-hora
 - Data-hora +/- tempo -> Data-hora
 - Data-hora 1, Data-hora 2 -> duracao
